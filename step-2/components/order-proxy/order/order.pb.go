// Code generated by protoc-gen-go. DO NOT EDIT.
// source: order.proto

package moonbucks

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Size int32

const (
	Size_SMALL  Size = 0
	Size_MEDIUM Size = 1
	Size_LARGE  Size = 2
)

var Size_name = map[int32]string{
	0: "SMALL",
	1: "MEDIUM",
	2: "LARGE",
}

var Size_value = map[string]int32{
	"SMALL":  0,
	"MEDIUM": 1,
	"LARGE":  2,
}

func (x Size) String() string {
	return proto.EnumName(Size_name, int32(x))
}

func (Size) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cd01338c35d87077, []int{0}
}

type SubscribeOrdersRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeOrdersRequest) Reset()         { *m = SubscribeOrdersRequest{} }
func (m *SubscribeOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeOrdersRequest) ProtoMessage()    {}
func (*SubscribeOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd01338c35d87077, []int{0}
}

func (m *SubscribeOrdersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeOrdersRequest.Unmarshal(m, b)
}
func (m *SubscribeOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeOrdersRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeOrdersRequest.Merge(m, src)
}
func (m *SubscribeOrdersRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeOrdersRequest.Size(m)
}
func (m *SubscribeOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeOrdersRequest proto.InternalMessageInfo

type CreateOrderRequest struct {
	Size                 Size     `protobuf:"varint,2,opt,name=size,proto3,enum=moonbucks.Size" json:"size,omitempty"`
	CoffeeType           string   `protobuf:"bytes,3,opt,name=coffee_type,json=coffeeType,proto3" json:"coffee_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateOrderRequest) Reset()         { *m = CreateOrderRequest{} }
func (m *CreateOrderRequest) String() string { return proto.CompactTextString(m) }
func (*CreateOrderRequest) ProtoMessage()    {}
func (*CreateOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd01338c35d87077, []int{1}
}

func (m *CreateOrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateOrderRequest.Unmarshal(m, b)
}
func (m *CreateOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateOrderRequest.Marshal(b, m, deterministic)
}
func (m *CreateOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOrderRequest.Merge(m, src)
}
func (m *CreateOrderRequest) XXX_Size() int {
	return xxx_messageInfo_CreateOrderRequest.Size(m)
}
func (m *CreateOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOrderRequest proto.InternalMessageInfo

func (m *CreateOrderRequest) GetSize() Size {
	if m != nil {
		return m.Size
	}
	return Size_SMALL
}

func (m *CreateOrderRequest) GetCoffeeType() string {
	if m != nil {
		return m.CoffeeType
	}
	return ""
}

type UpdateOrderRequest struct {
	Order                *CoffeeOrder          `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	OrderMask            *field_mask.FieldMask `protobuf:"bytes,2,opt,name=order_mask,json=orderMask,proto3" json:"order_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateOrderRequest) Reset()         { *m = UpdateOrderRequest{} }
func (m *UpdateOrderRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateOrderRequest) ProtoMessage()    {}
func (*UpdateOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd01338c35d87077, []int{2}
}

func (m *UpdateOrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateOrderRequest.Unmarshal(m, b)
}
func (m *UpdateOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateOrderRequest.Marshal(b, m, deterministic)
}
func (m *UpdateOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOrderRequest.Merge(m, src)
}
func (m *UpdateOrderRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateOrderRequest.Size(m)
}
func (m *UpdateOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOrderRequest proto.InternalMessageInfo

func (m *UpdateOrderRequest) GetOrder() *CoffeeOrder {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *UpdateOrderRequest) GetOrderMask() *field_mask.FieldMask {
	if m != nil {
		return m.OrderMask
	}
	return nil
}

type CoffeeOrder struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Size                 Size     `protobuf:"varint,2,opt,name=size,proto3,enum=moonbucks.Size" json:"size,omitempty"`
	CoffeeType           string   `protobuf:"bytes,3,opt,name=coffee_type,json=coffeeType,proto3" json:"coffee_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoffeeOrder) Reset()         { *m = CoffeeOrder{} }
func (m *CoffeeOrder) String() string { return proto.CompactTextString(m) }
func (*CoffeeOrder) ProtoMessage()    {}
func (*CoffeeOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd01338c35d87077, []int{3}
}

func (m *CoffeeOrder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoffeeOrder.Unmarshal(m, b)
}
func (m *CoffeeOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoffeeOrder.Marshal(b, m, deterministic)
}
func (m *CoffeeOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoffeeOrder.Merge(m, src)
}
func (m *CoffeeOrder) XXX_Size() int {
	return xxx_messageInfo_CoffeeOrder.Size(m)
}
func (m *CoffeeOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_CoffeeOrder.DiscardUnknown(m)
}

var xxx_messageInfo_CoffeeOrder proto.InternalMessageInfo

func (m *CoffeeOrder) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoffeeOrder) GetSize() Size {
	if m != nil {
		return m.Size
	}
	return Size_SMALL
}

func (m *CoffeeOrder) GetCoffeeType() string {
	if m != nil {
		return m.CoffeeType
	}
	return ""
}

func init() {
	proto.RegisterEnum("moonbucks.Size", Size_name, Size_value)
	proto.RegisterType((*SubscribeOrdersRequest)(nil), "moonbucks.SubscribeOrdersRequest")
	proto.RegisterType((*CreateOrderRequest)(nil), "moonbucks.CreateOrderRequest")
	proto.RegisterType((*UpdateOrderRequest)(nil), "moonbucks.UpdateOrderRequest")
	proto.RegisterType((*CoffeeOrder)(nil), "moonbucks.CoffeeOrder")
}

func init() { proto.RegisterFile("order.proto", fileDescriptor_cd01338c35d87077) }

var fileDescriptor_cd01338c35d87077 = []byte{
	// 425 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xcd, 0xae, 0x93, 0x40,
	0x14, 0xc7, 0x2f, 0xdc, 0x8f, 0x84, 0x33, 0xa6, 0x6d, 0x26, 0xb9, 0x37, 0x84, 0xf8, 0x81, 0xe8,
	0x82, 0xdc, 0x18, 0x50, 0x5c, 0x79, 0x77, 0xb5, 0xd6, 0xc6, 0xa4, 0x44, 0x03, 0x76, 0xa3, 0x8b,
	0x86, 0x8f, 0xa1, 0x19, 0xdb, 0x32, 0xc8, 0x40, 0x93, 0xd6, 0x74, 0xe3, 0x2b, 0xf8, 0x14, 0xfa,
	0x3a, 0xbe, 0x82, 0x0f, 0x62, 0x98, 0xa9, 0x8a, 0xad, 0xdd, 0xb9, 0x9b, 0x9c, 0xf3, 0xe7, 0x7f,
	0xce, 0xff, 0xfc, 0x00, 0xc4, 0xca, 0x94, 0x94, 0x4e, 0x51, 0xb2, 0x8a, 0x61, 0x6d, 0xc9, 0x58,
	0x1e, 0xd7, 0xc9, 0x9c, 0x1b, 0xe6, 0x8c, 0xb1, 0xd9, 0x82, 0xb8, 0xa2, 0x11, 0xd7, 0x99, 0x9b,
	0x51, 0xb2, 0x48, 0xa7, 0xcb, 0x88, 0xcf, 0xa5, 0xd8, 0xb8, 0xbd, 0x53, 0x44, 0x05, 0x75, 0xa3,
	0x3c, 0x67, 0x55, 0x54, 0x51, 0x96, 0x73, 0xd9, 0xb5, 0x74, 0xb8, 0x0a, 0xeb, 0x98, 0x27, 0x25,
	0x8d, 0xc9, 0xeb, 0x66, 0x04, 0x0f, 0xc8, 0xc7, 0x9a, 0xf0, 0xca, 0x7a, 0x07, 0x78, 0x50, 0x92,
	0xa8, 0x92, 0xe5, 0x5d, 0x15, 0x3f, 0x80, 0x33, 0x4e, 0x37, 0x44, 0x57, 0x4d, 0xc5, 0xee, 0x78,
	0x5d, 0xe7, 0xf7, 0x26, 0x4e, 0x48, 0x37, 0x24, 0x10, 0x4d, 0x7c, 0x0f, 0x50, 0xc2, 0xb2, 0x8c,
	0x90, 0x69, 0xb5, 0x2e, 0x88, 0x7e, 0x6a, 0x2a, 0xb6, 0x16, 0x80, 0x2c, 0xbd, 0x5d, 0x17, 0xc4,
	0xda, 0x02, 0x9e, 0x14, 0xe9, 0xbe, 0xf7, 0x23, 0x38, 0x17, 0x29, 0x75, 0xc5, 0x54, 0x6c, 0xe4,
	0x5d, 0xb5, 0xcc, 0x07, 0xe2, 0x5b, 0xa9, 0x96, 0x22, 0xfc, 0x0c, 0x40, 0x3c, 0x44, 0x56, 0xb1,
	0x0f, 0xf2, 0x0c, 0x47, 0x86, 0x75, 0x7e, 0x9d, 0xc3, 0x79, 0xd9, 0x9c, 0xc3, 0x8f, 0xf8, 0x3c,
	0xd0, 0x84, 0xba, 0x79, 0x5a, 0x09, 0xa0, 0x96, 0x21, 0xee, 0x80, 0x4a, 0x53, 0x31, 0xf4, 0x34,
	0x50, 0x69, 0xfa, 0x7f, 0x32, 0x5e, 0xdb, 0x70, 0xd6, 0xc8, 0xb1, 0x06, 0xe7, 0xa1, 0xdf, 0x1f,
	0x8f, 0x7b, 0x27, 0x18, 0xe0, 0xc2, 0x1f, 0xbe, 0x78, 0x35, 0xf1, 0x7b, 0x4a, 0x53, 0x1e, 0xf7,
	0x83, 0xd1, 0xb0, 0xa7, 0x7a, 0x5f, 0x55, 0xb8, 0x25, 0x36, 0x09, 0x49, 0xb9, 0xa2, 0x09, 0xc1,
	0x6f, 0xa0, 0xbb, 0x07, 0x05, 0xdf, 0x6f, 0x6f, 0xf1, 0x4f, 0x60, 0xc6, 0x91, 0x7b, 0x59, 0x27,
	0x8f, 0x15, 0xfc, 0x1e, 0x50, 0x0b, 0x26, 0xbe, 0xd3, 0x96, 0x1e, 0x40, 0x3e, 0xea, 0x74, 0xf9,
	0xf9, 0xfb, 0x8f, 0x2f, 0x6a, 0xd7, 0x02, 0x77, 0xf5, 0xc4, 0x15, 0xe7, 0xe4, 0x37, 0xca, 0x35,
	0xfe, 0x00, 0xa8, 0x45, 0xf3, 0x2f, 0xf3, 0x43, 0xca, 0x47, 0xcd, 0x1f, 0x0a, 0xf3, 0xbb, 0xde,
	0xe5, 0x1f, 0x73, 0xf7, 0x93, 0xfc, 0xeb, 0x69, 0xba, 0xbd, 0x91, 0xd4, 0x9f, 0x77, 0xbe, 0xa9,
	0x48, 0xc6, 0x76, 0x46, 0x65, 0x91, 0xc4, 0x17, 0x82, 0xf4, 0xd3, 0x9f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xcc, 0xee, 0x88, 0x1a, 0x20, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrderServiceClient interface {
	SubscribeOrders(ctx context.Context, in *SubscribeOrdersRequest, opts ...grpc.CallOption) (OrderService_SubscribeOrdersClient, error)
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CoffeeOrder, error)
	UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*CoffeeOrder, error)
}

type orderServiceClient struct {
	cc *grpc.ClientConn
}

func NewOrderServiceClient(cc *grpc.ClientConn) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) SubscribeOrders(ctx context.Context, in *SubscribeOrdersRequest, opts ...grpc.CallOption) (OrderService_SubscribeOrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OrderService_serviceDesc.Streams[0], "/moonbucks.OrderService/SubscribeOrders", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderServiceSubscribeOrdersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrderService_SubscribeOrdersClient interface {
	Recv() (*CoffeeOrder, error)
	grpc.ClientStream
}

type orderServiceSubscribeOrdersClient struct {
	grpc.ClientStream
}

func (x *orderServiceSubscribeOrdersClient) Recv() (*CoffeeOrder, error) {
	m := new(CoffeeOrder)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderServiceClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CoffeeOrder, error) {
	out := new(CoffeeOrder)
	err := c.cc.Invoke(ctx, "/moonbucks.OrderService/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*CoffeeOrder, error) {
	out := new(CoffeeOrder)
	err := c.cc.Invoke(ctx, "/moonbucks.OrderService/UpdateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
type OrderServiceServer interface {
	SubscribeOrders(*SubscribeOrdersRequest, OrderService_SubscribeOrdersServer) error
	CreateOrder(context.Context, *CreateOrderRequest) (*CoffeeOrder, error)
	UpdateOrder(context.Context, *UpdateOrderRequest) (*CoffeeOrder, error)
}

// UnimplementedOrderServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (*UnimplementedOrderServiceServer) SubscribeOrders(req *SubscribeOrdersRequest, srv OrderService_SubscribeOrdersServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeOrders not implemented")
}
func (*UnimplementedOrderServiceServer) CreateOrder(ctx context.Context, req *CreateOrderRequest) (*CoffeeOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (*UnimplementedOrderServiceServer) UpdateOrder(ctx context.Context, req *UpdateOrderRequest) (*CoffeeOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}

func RegisterOrderServiceServer(s *grpc.Server, srv OrderServiceServer) {
	s.RegisterService(&_OrderService_serviceDesc, srv)
}

func _OrderService_SubscribeOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeOrdersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderServiceServer).SubscribeOrders(m, &orderServiceSubscribeOrdersServer{stream})
}

type OrderService_SubscribeOrdersServer interface {
	Send(*CoffeeOrder) error
	grpc.ServerStream
}

type orderServiceSubscribeOrdersServer struct {
	grpc.ServerStream
}

func (x *orderServiceSubscribeOrdersServer) Send(m *CoffeeOrder) error {
	return x.ServerStream.SendMsg(m)
}

func _OrderService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moonbucks.OrderService/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moonbucks.OrderService/UpdateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UpdateOrder(ctx, req.(*UpdateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moonbucks.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _OrderService_CreateOrder_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _OrderService_UpdateOrder_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeOrders",
			Handler:       _OrderService_SubscribeOrders_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "order.proto",
}
